
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c52  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000100  00800060  00800060  00000cc6  2**0
                  ALLOC
  2 .stab         000012f0  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000083b  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 1e 06 	call	0xc3c	; 0xc3c <main>
  74:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_init>:

#define BAUD_PRESCALE (((F_CPU/(UART_BAUDRATE* 8UL))) - 1)

/***************              Functions Definitions              ***************/
void UART_init(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA_REG = (1<<U2X);
  84:	eb e2       	ldi	r30, 0x2B	; 43
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	80 83       	st	Z, r24
	UCSRB_REG = (1<<RXEN) | (1<<TXEN);
  8c:	ea e2       	ldi	r30, 0x2A	; 42
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	80 83       	st	Z, r24
	UCSRC_REG = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
  94:	e0 e4       	ldi	r30, 0x40	; 64
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	80 83       	st	Z, r24
	/* First 8 bits from the UART BAUD RATE REGISTER inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_REG = BAUD_PRESCALE>>8;
  9c:	e0 e4       	ldi	r30, 0x40	; 64
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	UBRRL_REG = BAUD_PRESCALE;
  a2:	e9 e2       	ldi	r30, 0x29	; 41
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	80 83       	st	Z, r24
}
  aa:	cf 91       	pop	r28
  ac:	df 91       	pop	r29
  ae:	08 95       	ret

000000b0 <UART_sendByte>:

void UART_sendByte(const uint8_t data)
{
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	0f 92       	push	r0
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE Flag is set when the TX Buffer is ready to recieve new data to transmit */
	while(BIT_IS_CLEAR(UCSRA_REG,UDRE)){}
  bc:	eb e2       	ldi	r30, 0x2B	; 43
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 2f       	mov	r24, r24
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	80 72       	andi	r24, 0x20	; 32
  c8:	90 70       	andi	r25, 0x00	; 0
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	b9 f3       	breq	.-18     	; 0xbc <UART_sendByte+0xc>
	UDR_REG = data;
  ce:	ec e2       	ldi	r30, 0x2C	; 44
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	80 83       	st	Z, r24
}
  d6:	0f 90       	pop	r0
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <UART_recieveByte>:

uint8_t UART_recieveByte(void)
{
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data */
	while(BIT_IS_CLEAR(UCSRA_REG,RXC)){}
  e6:	eb e2       	ldi	r30, 0x2B	; 43
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 23       	and	r24, r24
  ee:	dc f7       	brge	.-10     	; 0xe6 <UART_recieveByte+0x8>
	return UDR_REG;
  f0:	ec e2       	ldi	r30, 0x2C	; 44
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
}
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <UART_sendString>:

void UART_sendString(const uint8_t *Str)
{
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	00 d0       	rcall	.+0      	; 0x102 <UART_sendString+0x6>
 102:	0f 92       	push	r0
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	9b 83       	std	Y+3, r25	; 0x03
 10a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 10c:	19 82       	std	Y+1, r1	; 0x01
 10e:	0e c0       	rjmp	.+28     	; 0x12c <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	9b 81       	ldd	r25, Y+3	; 0x03
 11a:	fc 01       	movw	r30, r24
 11c:	e2 0f       	add	r30, r18
 11e:	f3 1f       	adc	r31, r19
 120:	80 81       	ld	r24, Z
 122:	0e 94 58 00 	call	0xb0	; 0xb0 <UART_sendByte>
		i++;
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8_t *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	9b 81       	ldd	r25, Y+3	; 0x03
 136:	fc 01       	movw	r30, r24
 138:	e2 0f       	add	r30, r18
 13a:	f3 1f       	adc	r31, r19
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	39 f7       	brne	.-50     	; 0x110 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	cf 91       	pop	r28
 14a:	df 91       	pop	r29
 14c:	08 95       	ret

0000014e <UART_receiveString>:


void UART_receiveString(uint8_t *Str)
{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	00 d0       	rcall	.+0      	; 0x158 <UART_receiveString+0xa>
 158:	0f 92       	push	r0
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	9b 83       	std	Y+3, r25	; 0x03
 160:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 162:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	8a 81       	ldd	r24, Y+2	; 0x02
 16c:	9b 81       	ldd	r25, Y+3	; 0x03
 16e:	8c 01       	movw	r16, r24
 170:	02 0f       	add	r16, r18
 172:	13 1f       	adc	r17, r19
 174:	0e 94 6f 00 	call	0xde	; 0xde <UART_recieveByte>
 178:	f8 01       	movw	r30, r16
 17a:	80 83       	st	Z, r24
 17c:	0f c0       	rjmp	.+30     	; 0x19c <UART_receiveString+0x4e>
	while(Str[i] != '\x0D')
	{
		i++;
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	9b 81       	ldd	r25, Y+3	; 0x03
 18e:	8c 01       	movw	r16, r24
 190:	02 0f       	add	r16, r18
 192:	13 1f       	adc	r17, r19
 194:	0e 94 6f 00 	call	0xde	; 0xde <UART_recieveByte>
 198:	f8 01       	movw	r30, r16
 19a:	80 83       	st	Z, r24

void UART_receiveString(uint8_t *Str)
{
	uint8_t i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '\x0D')
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	9b 81       	ldd	r25, Y+3	; 0x03
 1a6:	fc 01       	movw	r30, r24
 1a8:	e2 0f       	add	r30, r18
 1aa:	f3 1f       	adc	r31, r19
 1ac:	80 81       	ld	r24, Z
 1ae:	8d 30       	cpi	r24, 0x0D	; 13
 1b0:	31 f7       	brne	.-52     	; 0x17e <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	9b 81       	ldd	r25, Y+3	; 0x03
 1bc:	fc 01       	movw	r30, r24
 1be:	e2 0f       	add	r30, r18
 1c0:	f3 1f       	adc	r31, r19
 1c2:	10 82       	st	Z, r1
}
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	cf 91       	pop	r28
 1cc:	df 91       	pop	r29
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <SPI_initMaster>:
 *******************************************************************************/

#include "spi.h"

void SPI_initMaster(void) 
{
 1d4:	df 93       	push	r29
 1d6:	cf 93       	push	r28
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<PB4);  //SS(PB4)   --> Output
 1dc:	a7 e3       	ldi	r26, 0x37	; 55
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	e7 e3       	ldi	r30, 0x37	; 55
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	8c 93       	st	X, r24
	DDRB |= (1<<PB5);  //MOSI(PB5) --> Output
 1ea:	a7 e3       	ldi	r26, 0x37	; 55
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	e7 e3       	ldi	r30, 0x37	; 55
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	80 62       	ori	r24, 0x20	; 32
 1f6:	8c 93       	st	X, r24
	DDRB &= (~(1<<PB6)); //MISO(PB6) --> Input
 1f8:	a7 e3       	ldi	r26, 0x37	; 55
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e7 e3       	ldi	r30, 0x37	; 55
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	8f 7b       	andi	r24, 0xBF	; 191
 204:	8c 93       	st	X, r24
	DDRB |= (1<<PB7);  //SCK(PB7) --> Output
 206:	a7 e3       	ldi	r26, 0x37	; 55
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e7 e3       	ldi	r30, 0x37	; 55
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 68       	ori	r24, 0x80	; 128
 212:	8c 93       	st	X, r24
	
	SPCR = (1<<SPE) | (1<<MSTR); //Clock = FOSC/4
 214:	ed e2       	ldi	r30, 0x2D	; 45
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 e5       	ldi	r24, 0x50	; 80
 21a:	80 83       	st	Z, r24
}
 21c:	cf 91       	pop	r28
 21e:	df 91       	pop	r29
 220:	08 95       	ret

00000222 <SPI_initSlave>:

void SPI_initSlave(void)
{ 
 222:	df 93       	push	r29
 224:	cf 93       	push	r28
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
	DDRB &= (~(1<<PB4));  //SS(PB4)   --> Input
 22a:	a7 e3       	ldi	r26, 0x37	; 55
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	e7 e3       	ldi	r30, 0x37	; 55
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	8f 7e       	andi	r24, 0xEF	; 239
 236:	8c 93       	st	X, r24
	DDRB &= (~(1<<PB5));  //MOSI(PB5) --> Input
 238:	a7 e3       	ldi	r26, 0x37	; 55
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	e7 e3       	ldi	r30, 0x37	; 55
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	8f 7d       	andi	r24, 0xDF	; 223
 244:	8c 93       	st	X, r24
	DDRB |= (1<<PB6);		//MISO(PB6) --> Output
 246:	a7 e3       	ldi	r26, 0x37	; 55
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e7 e3       	ldi	r30, 0x37	; 55
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	80 64       	ori	r24, 0x40	; 64
 252:	8c 93       	st	X, r24
	DDRB &= (~(1<<PB7));  //SCK(PB7) --> Input
 254:	a7 e3       	ldi	r26, 0x37	; 55
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e7 e3       	ldi	r30, 0x37	; 55
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	8f 77       	andi	r24, 0x7F	; 127
 260:	8c 93       	st	X, r24
	SPCR = (1<<SPE); // just enable SPI + choose SPI clock = Fosc/4
 262:	ed e2       	ldi	r30, 0x2D	; 45
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 e4       	ldi	r24, 0x40	; 64
 268:	80 83       	st	Z, r24
}
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	08 95       	ret

00000270 <SPI_sendByte>:

void SPI_sendByte(const uint8_t data)
{
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	0f 92       	push	r0
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data; //Adding data to register
 27c:	ef e2       	ldi	r30, 0x2F	; 47
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(SPSR,SPIF)){} //wait until data is sent correctly (flag =1)
 284:	ee e2       	ldi	r30, 0x2E	; 46
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	88 23       	and	r24, r24
 28c:	dc f7       	brge	.-10     	; 0x284 <SPI_sendByte+0x14>
}
 28e:	0f 90       	pop	r0
 290:	cf 91       	pop	r28
 292:	df 91       	pop	r29
 294:	08 95       	ret

00000296 <SPI_recieveByte>:

uint8_t SPI_recieveByte(void)
{
 296:	df 93       	push	r29
 298:	cf 93       	push	r28
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
   while(BIT_IS_CLEAR(SPSR,SPIF)){} //wait until SPI data is received correctly
 29e:	ee e2       	ldi	r30, 0x2E	; 46
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	88 23       	and	r24, r24
 2a6:	dc f7       	brge	.-10     	; 0x29e <SPI_recieveByte+0x8>
   return SPDR; //return the received data from SPI data register
 2a8:	ef e2       	ldi	r30, 0x2F	; 47
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
}
 2ae:	cf 91       	pop	r28
 2b0:	df 91       	pop	r29
 2b2:	08 95       	ret

000002b4 <SPI_SendString>:

void SPI_SendString(const uint8_t *Str)
{
 2b4:	df 93       	push	r29
 2b6:	cf 93       	push	r28
 2b8:	00 d0       	rcall	.+0      	; 0x2ba <SPI_SendString+0x6>
 2ba:	0f 92       	push	r0
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	9b 83       	std	Y+3, r25	; 0x03
 2c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 2c4:	19 82       	std	Y+1, r1	; 0x01
 2c6:	0e c0       	rjmp	.+28     	; 0x2e4 <SPI_SendString+0x30>
	while(Str[i] != '\0')
	{
		SPI_sendByte(Str[i]);
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	28 2f       	mov	r18, r24
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	9b 81       	ldd	r25, Y+3	; 0x03
 2d2:	fc 01       	movw	r30, r24
 2d4:	e2 0f       	add	r30, r18
 2d6:	f3 1f       	adc	r31, r19
 2d8:	80 81       	ld	r24, Z
 2da:	0e 94 38 01 	call	0x270	; 0x270 <SPI_sendByte>
		i++;
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	89 83       	std	Y+1, r24	; 0x01
}

void SPI_SendString(const uint8_t *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	28 2f       	mov	r18, r24
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	9b 81       	ldd	r25, Y+3	; 0x03
 2ee:	fc 01       	movw	r30, r24
 2f0:	e2 0f       	add	r30, r18
 2f2:	f3 1f       	adc	r31, r19
 2f4:	80 81       	ld	r24, Z
 2f6:	88 23       	and	r24, r24
 2f8:	39 f7       	brne	.-50     	; 0x2c8 <SPI_SendString+0x14>
	{
		SPI_sendByte(Str[i]);
		i++;
	}
	SPI_sendByte('#');
 2fa:	83 e2       	ldi	r24, 0x23	; 35
 2fc:	0e 94 38 01 	call	0x270	; 0x270 <SPI_sendByte>
}
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	cf 91       	pop	r28
 308:	df 91       	pop	r29
 30a:	08 95       	ret

0000030c <SPI_ReceiveString>:

void SPI_ReceiveString(uint8_t *Str)
{
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	df 93       	push	r29
 312:	cf 93       	push	r28
 314:	00 d0       	rcall	.+0      	; 0x316 <SPI_ReceiveString+0xa>
 316:	0f 92       	push	r0
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	9b 83       	std	Y+3, r25	; 0x03
 31e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 320:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = SPI_recieveByte();
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	28 2f       	mov	r18, r24
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	9b 81       	ldd	r25, Y+3	; 0x03
 32c:	8c 01       	movw	r16, r24
 32e:	02 0f       	add	r16, r18
 330:	13 1f       	adc	r17, r19
 332:	0e 94 4b 01 	call	0x296	; 0x296 <SPI_recieveByte>
 336:	f8 01       	movw	r30, r16
 338:	80 83       	st	Z, r24
 33a:	0f c0       	rjmp	.+30     	; 0x35a <SPI_ReceiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = SPI_recieveByte();
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	28 2f       	mov	r18, r24
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	8a 81       	ldd	r24, Y+2	; 0x02
 34a:	9b 81       	ldd	r25, Y+3	; 0x03
 34c:	8c 01       	movw	r16, r24
 34e:	02 0f       	add	r16, r18
 350:	13 1f       	adc	r17, r19
 352:	0e 94 4b 01 	call	0x296	; 0x296 <SPI_recieveByte>
 356:	f8 01       	movw	r30, r16
 358:	80 83       	st	Z, r24

void SPI_ReceiveString(uint8_t *Str)
{
	uint8_t i = 0;
	Str[i] = SPI_recieveByte();
	while(Str[i] != '#')
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	9b 81       	ldd	r25, Y+3	; 0x03
 364:	fc 01       	movw	r30, r24
 366:	e2 0f       	add	r30, r18
 368:	f3 1f       	adc	r31, r19
 36a:	80 81       	ld	r24, Z
 36c:	83 32       	cpi	r24, 0x23	; 35
 36e:	31 f7       	brne	.-52     	; 0x33c <SPI_ReceiveString+0x30>
	{
		i++;
		Str[i] = SPI_recieveByte();
	}
	Str[i] = '\0';
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	28 2f       	mov	r18, r24
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	9b 81       	ldd	r25, Y+3	; 0x03
 37a:	fc 01       	movw	r30, r24
 37c:	e2 0f       	add	r30, r18
 37e:	f3 1f       	adc	r31, r19
 380:	10 82       	st	Z, r1
}
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	cf 91       	pop	r28
 38a:	df 91       	pop	r29
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <DIO_setPinDirection>:

#include "DIO.h"


E_STATUS DIO_setPinDirection(uint8_t port, uint8_t pin, uint8_t dir)
{
 392:	df 93       	push	r29
 394:	cf 93       	push	r28
 396:	00 d0       	rcall	.+0      	; 0x398 <DIO_setPinDirection+0x6>
 398:	00 d0       	rcall	.+0      	; 0x39a <DIO_setPinDirection+0x8>
 39a:	00 d0       	rcall	.+0      	; 0x39c <DIO_setPinDirection+0xa>
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	8a 83       	std	Y+2, r24	; 0x02
 3a2:	6b 83       	std	Y+3, r22	; 0x03
 3a4:	4c 83       	std	Y+4, r20	; 0x04
	E_STATUS u8_State=ERROR;
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	89 83       	std	Y+1, r24	; 0x01
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	84 30       	cpi	r24, 0x04	; 4
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <DIO_setPinDirection+0x20>
 3b0:	d7 c0       	rjmp	.+430    	; 0x560 <DIO_setPinDirection+0x1ce>
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	88 30       	cpi	r24, 0x08	; 8
 3b6:	08 f0       	brcs	.+2      	; 0x3ba <DIO_setPinDirection+0x28>
 3b8:	d3 c0       	rjmp	.+422    	; 0x560 <DIO_setPinDirection+0x1ce>
		u8_State=Success;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	3e 83       	std	Y+6, r19	; 0x06
 3c6:	2d 83       	std	Y+5, r18	; 0x05
 3c8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ca:	9e 81       	ldd	r25, Y+6	; 0x06
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	91 05       	cpc	r25, r1
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <DIO_setPinDirection+0x42>
 3d2:	43 c0       	rjmp	.+134    	; 0x45a <DIO_setPinDirection+0xc8>
 3d4:	2d 81       	ldd	r18, Y+5	; 0x05
 3d6:	3e 81       	ldd	r19, Y+6	; 0x06
 3d8:	22 30       	cpi	r18, 0x02	; 2
 3da:	31 05       	cpc	r19, r1
 3dc:	2c f4       	brge	.+10     	; 0x3e8 <DIO_setPinDirection+0x56>
 3de:	8d 81       	ldd	r24, Y+5	; 0x05
 3e0:	9e 81       	ldd	r25, Y+6	; 0x06
 3e2:	00 97       	sbiw	r24, 0x00	; 0
 3e4:	71 f0       	breq	.+28     	; 0x402 <DIO_setPinDirection+0x70>
 3e6:	bc c0       	rjmp	.+376    	; 0x560 <DIO_setPinDirection+0x1ce>
 3e8:	2d 81       	ldd	r18, Y+5	; 0x05
 3ea:	3e 81       	ldd	r19, Y+6	; 0x06
 3ec:	22 30       	cpi	r18, 0x02	; 2
 3ee:	31 05       	cpc	r19, r1
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <DIO_setPinDirection+0x62>
 3f2:	5f c0       	rjmp	.+190    	; 0x4b2 <DIO_setPinDirection+0x120>
 3f4:	8d 81       	ldd	r24, Y+5	; 0x05
 3f6:	9e 81       	ldd	r25, Y+6	; 0x06
 3f8:	83 30       	cpi	r24, 0x03	; 3
 3fa:	91 05       	cpc	r25, r1
 3fc:	09 f4       	brne	.+2      	; 0x400 <DIO_setPinDirection+0x6e>
 3fe:	85 c0       	rjmp	.+266    	; 0x50a <DIO_setPinDirection+0x178>
 400:	af c0       	rjmp	.+350    	; 0x560 <DIO_setPinDirection+0x1ce>
		{
		case PortA:
		{
			if(dir==INPUT)
 402:	8c 81       	ldd	r24, Y+4	; 0x04
 404:	88 23       	and	r24, r24
 406:	a9 f4       	brne	.+42     	; 0x432 <DIO_setPinDirection+0xa0>
				CLEAR_BIT(DDRA,pin);
 408:	aa e3       	ldi	r26, 0x3A	; 58
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	ea e3       	ldi	r30, 0x3A	; 58
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	48 2f       	mov	r20, r24
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 2e       	mov	r0, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_setPinDirection+0x94>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_setPinDirection+0x90>
 42a:	80 95       	com	r24
 42c:	84 23       	and	r24, r20
 42e:	8c 93       	st	X, r24
 430:	97 c0       	rjmp	.+302    	; 0x560 <DIO_setPinDirection+0x1ce>
			else
				SET_BIT(DDRA,pin);
 432:	aa e3       	ldi	r26, 0x3A	; 58
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	ea e3       	ldi	r30, 0x3A	; 58
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	48 2f       	mov	r20, r24
 43e:	8b 81       	ldd	r24, Y+3	; 0x03
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 2e       	mov	r0, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_setPinDirection+0xbe>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_setPinDirection+0xba>
 454:	84 2b       	or	r24, r20
 456:	8c 93       	st	X, r24
 458:	83 c0       	rjmp	.+262    	; 0x560 <DIO_setPinDirection+0x1ce>
		}
		break;
		case PortB:
		{
			if(dir==INPUT)
 45a:	8c 81       	ldd	r24, Y+4	; 0x04
 45c:	88 23       	and	r24, r24
 45e:	a9 f4       	brne	.+42     	; 0x48a <DIO_setPinDirection+0xf8>
				CLEAR_BIT(DDRB,pin);
 460:	a7 e3       	ldi	r26, 0x37	; 55
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	e7 e3       	ldi	r30, 0x37	; 55
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	48 2f       	mov	r20, r24
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	28 2f       	mov	r18, r24
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 2e       	mov	r0, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_setPinDirection+0xec>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_setPinDirection+0xe8>
 482:	80 95       	com	r24
 484:	84 23       	and	r24, r20
 486:	8c 93       	st	X, r24
 488:	6b c0       	rjmp	.+214    	; 0x560 <DIO_setPinDirection+0x1ce>
			else
				SET_BIT(DDRB,pin);
 48a:	a7 e3       	ldi	r26, 0x37	; 55
 48c:	b0 e0       	ldi	r27, 0x00	; 0
 48e:	e7 e3       	ldi	r30, 0x37	; 55
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	48 2f       	mov	r20, r24
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	28 2f       	mov	r18, r24
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 2e       	mov	r0, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_setPinDirection+0x116>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	0a 94       	dec	r0
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_setPinDirection+0x112>
 4ac:	84 2b       	or	r24, r20
 4ae:	8c 93       	st	X, r24
 4b0:	57 c0       	rjmp	.+174    	; 0x560 <DIO_setPinDirection+0x1ce>
		}
		break;
		case PortC:
		{
			if(dir==INPUT)
 4b2:	8c 81       	ldd	r24, Y+4	; 0x04
 4b4:	88 23       	and	r24, r24
 4b6:	a9 f4       	brne	.+42     	; 0x4e2 <DIO_setPinDirection+0x150>
				CLEAR_BIT(DDRC,pin);
 4b8:	a4 e3       	ldi	r26, 0x34	; 52
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	e4 e3       	ldi	r30, 0x34	; 52
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	48 2f       	mov	r20, r24
 4c4:	8b 81       	ldd	r24, Y+3	; 0x03
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 2e       	mov	r0, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_setPinDirection+0x144>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	0a 94       	dec	r0
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_setPinDirection+0x140>
 4da:	80 95       	com	r24
 4dc:	84 23       	and	r24, r20
 4de:	8c 93       	st	X, r24
 4e0:	3f c0       	rjmp	.+126    	; 0x560 <DIO_setPinDirection+0x1ce>
			else
				SET_BIT(DDRC,pin);
 4e2:	a4 e3       	ldi	r26, 0x34	; 52
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e4 e3       	ldi	r30, 0x34	; 52
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	48 2f       	mov	r20, r24
 4ee:	8b 81       	ldd	r24, Y+3	; 0x03
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 2e       	mov	r0, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_setPinDirection+0x16e>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_setPinDirection+0x16a>
 504:	84 2b       	or	r24, r20
 506:	8c 93       	st	X, r24
 508:	2b c0       	rjmp	.+86     	; 0x560 <DIO_setPinDirection+0x1ce>
		}
		break;
		case PortD:
		{
			if(dir==INPUT)
 50a:	8c 81       	ldd	r24, Y+4	; 0x04
 50c:	88 23       	and	r24, r24
 50e:	a9 f4       	brne	.+42     	; 0x53a <DIO_setPinDirection+0x1a8>
				CLEAR_BIT(DDRD,pin);
 510:	a1 e3       	ldi	r26, 0x31	; 49
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	e1 e3       	ldi	r30, 0x31	; 49
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	48 2f       	mov	r20, r24
 51c:	8b 81       	ldd	r24, Y+3	; 0x03
 51e:	28 2f       	mov	r18, r24
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 2e       	mov	r0, r18
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_setPinDirection+0x19c>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	0a 94       	dec	r0
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_setPinDirection+0x198>
 532:	80 95       	com	r24
 534:	84 23       	and	r24, r20
 536:	8c 93       	st	X, r24
 538:	13 c0       	rjmp	.+38     	; 0x560 <DIO_setPinDirection+0x1ce>
			else
				SET_BIT(DDRD,pin);
 53a:	a1 e3       	ldi	r26, 0x31	; 49
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	e1 e3       	ldi	r30, 0x31	; 49
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	48 2f       	mov	r20, r24
 546:	8b 81       	ldd	r24, Y+3	; 0x03
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 2e       	mov	r0, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_setPinDirection+0x1c6>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_setPinDirection+0x1c2>
 55c:	84 2b       	or	r24, r20
 55e:	8c 93       	st	X, r24
		}
		break;
		}
	}
	return u8_State;
 560:	89 81       	ldd	r24, Y+1	; 0x01
}
 562:	26 96       	adiw	r28, 0x06	; 6
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	f8 94       	cli
 568:	de bf       	out	0x3e, r29	; 62
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	cd bf       	out	0x3d, r28	; 61
 56e:	cf 91       	pop	r28
 570:	df 91       	pop	r29
 572:	08 95       	ret

00000574 <DIO_setPortDirection>:

E_STATUS DIO_setPortDirection(uint8_t port, uint8_t dir)
{
 574:	df 93       	push	r29
 576:	cf 93       	push	r28
 578:	00 d0       	rcall	.+0      	; 0x57a <DIO_setPortDirection+0x6>
 57a:	00 d0       	rcall	.+0      	; 0x57c <DIO_setPortDirection+0x8>
 57c:	0f 92       	push	r0
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
 582:	8a 83       	std	Y+2, r24	; 0x02
 584:	6b 83       	std	Y+3, r22	; 0x03
	E_STATUS u8_State=ERROR;
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	89 83       	std	Y+1, r24	; 0x01
	if((port>=PortA)&&(port<=PortD)){
 58a:	8a 81       	ldd	r24, Y+2	; 0x02
 58c:	84 30       	cpi	r24, 0x04	; 4
 58e:	08 f0       	brcs	.+2      	; 0x592 <DIO_setPortDirection+0x1e>
 590:	50 c0       	rjmp	.+160    	; 0x632 <DIO_setPortDirection+0xbe>
		u8_State=Success;
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 596:	8a 81       	ldd	r24, Y+2	; 0x02
 598:	28 2f       	mov	r18, r24
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	3d 83       	std	Y+5, r19	; 0x05
 59e:	2c 83       	std	Y+4, r18	; 0x04
 5a0:	8c 81       	ldd	r24, Y+4	; 0x04
 5a2:	9d 81       	ldd	r25, Y+5	; 0x05
 5a4:	81 30       	cpi	r24, 0x01	; 1
 5a6:	91 05       	cpc	r25, r1
 5a8:	09 f1       	breq	.+66     	; 0x5ec <DIO_setPortDirection+0x78>
 5aa:	2c 81       	ldd	r18, Y+4	; 0x04
 5ac:	3d 81       	ldd	r19, Y+5	; 0x05
 5ae:	22 30       	cpi	r18, 0x02	; 2
 5b0:	31 05       	cpc	r19, r1
 5b2:	2c f4       	brge	.+10     	; 0x5be <DIO_setPortDirection+0x4a>
 5b4:	8c 81       	ldd	r24, Y+4	; 0x04
 5b6:	9d 81       	ldd	r25, Y+5	; 0x05
 5b8:	00 97       	sbiw	r24, 0x00	; 0
 5ba:	61 f0       	breq	.+24     	; 0x5d4 <DIO_setPortDirection+0x60>
 5bc:	3a c0       	rjmp	.+116    	; 0x632 <DIO_setPortDirection+0xbe>
 5be:	2c 81       	ldd	r18, Y+4	; 0x04
 5c0:	3d 81       	ldd	r19, Y+5	; 0x05
 5c2:	22 30       	cpi	r18, 0x02	; 2
 5c4:	31 05       	cpc	r19, r1
 5c6:	f1 f0       	breq	.+60     	; 0x604 <DIO_setPortDirection+0x90>
 5c8:	8c 81       	ldd	r24, Y+4	; 0x04
 5ca:	9d 81       	ldd	r25, Y+5	; 0x05
 5cc:	83 30       	cpi	r24, 0x03	; 3
 5ce:	91 05       	cpc	r25, r1
 5d0:	29 f1       	breq	.+74     	; 0x61c <DIO_setPortDirection+0xa8>
 5d2:	2f c0       	rjmp	.+94     	; 0x632 <DIO_setPortDirection+0xbe>
		{
		case PortA:
		{
			if(dir==OUTPUT)
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	29 f4       	brne	.+10     	; 0x5e4 <DIO_setPortDirection+0x70>
			{
				DDRA=OUTPUT_PORT;
 5da:	ea e3       	ldi	r30, 0x3A	; 58
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	80 83       	st	Z, r24
 5e2:	27 c0       	rjmp	.+78     	; 0x632 <DIO_setPortDirection+0xbe>
			}else
				DDRA=INPUT_PORT;
 5e4:	ea e3       	ldi	r30, 0x3A	; 58
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	10 82       	st	Z, r1
 5ea:	23 c0       	rjmp	.+70     	; 0x632 <DIO_setPortDirection+0xbe>
		}
		break;
		case PortB:
		{
			if(dir==OUTPUT)
 5ec:	8b 81       	ldd	r24, Y+3	; 0x03
 5ee:	81 30       	cpi	r24, 0x01	; 1
 5f0:	29 f4       	brne	.+10     	; 0x5fc <DIO_setPortDirection+0x88>
			{
				DDRB=OUTPUT_PORT;
 5f2:	e7 e3       	ldi	r30, 0x37	; 55
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	8f ef       	ldi	r24, 0xFF	; 255
 5f8:	80 83       	st	Z, r24
 5fa:	1b c0       	rjmp	.+54     	; 0x632 <DIO_setPortDirection+0xbe>
			}else
				DDRB=INPUT_PORT;
 5fc:	e7 e3       	ldi	r30, 0x37	; 55
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	10 82       	st	Z, r1
 602:	17 c0       	rjmp	.+46     	; 0x632 <DIO_setPortDirection+0xbe>
		}
		break;
		case PortC:
		{
			if(dir==OUTPUT)
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	81 30       	cpi	r24, 0x01	; 1
 608:	29 f4       	brne	.+10     	; 0x614 <DIO_setPortDirection+0xa0>
			{
				DDRC=OUTPUT_PORT;
 60a:	e4 e3       	ldi	r30, 0x34	; 52
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	8f ef       	ldi	r24, 0xFF	; 255
 610:	80 83       	st	Z, r24
 612:	0f c0       	rjmp	.+30     	; 0x632 <DIO_setPortDirection+0xbe>
			}else
				DDRC=INPUT_PORT;
 614:	e4 e3       	ldi	r30, 0x34	; 52
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	10 82       	st	Z, r1
 61a:	0b c0       	rjmp	.+22     	; 0x632 <DIO_setPortDirection+0xbe>
		}
		break;
		case PortD:
		{
			if(dir==OUTPUT)
 61c:	8b 81       	ldd	r24, Y+3	; 0x03
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	29 f4       	brne	.+10     	; 0x62c <DIO_setPortDirection+0xb8>
			{
				DDRD=OUTPUT_PORT;
 622:	e1 e3       	ldi	r30, 0x31	; 49
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	80 83       	st	Z, r24
 62a:	03 c0       	rjmp	.+6      	; 0x632 <DIO_setPortDirection+0xbe>
			}else
				DDRD=INPUT_PORT;
 62c:	e1 e3       	ldi	r30, 0x31	; 49
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	10 82       	st	Z, r1
		}
		break;
		}
	}
	return u8_State;
 632:	89 81       	ldd	r24, Y+1	; 0x01
}
 634:	0f 90       	pop	r0
 636:	0f 90       	pop	r0
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	cf 91       	pop	r28
 640:	df 91       	pop	r29
 642:	08 95       	ret

00000644 <DIO_togglePin>:


E_STATUS DIO_togglePin(uint8_t port, uint8_t pin)
{
 644:	df 93       	push	r29
 646:	cf 93       	push	r28
 648:	00 d0       	rcall	.+0      	; 0x64a <DIO_togglePin+0x6>
 64a:	00 d0       	rcall	.+0      	; 0x64c <DIO_togglePin+0x8>
 64c:	0f 92       	push	r0
 64e:	cd b7       	in	r28, 0x3d	; 61
 650:	de b7       	in	r29, 0x3e	; 62
 652:	8a 83       	std	Y+2, r24	; 0x02
 654:	6b 83       	std	Y+3, r22	; 0x03
	E_STATUS u8_State=ERROR;
 656:	8f ef       	ldi	r24, 0xFF	; 255
 658:	89 83       	std	Y+1, r24	; 0x01
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
 65a:	8a 81       	ldd	r24, Y+2	; 0x02
 65c:	84 30       	cpi	r24, 0x04	; 4
 65e:	08 f0       	brcs	.+2      	; 0x662 <DIO_togglePin+0x1e>
 660:	74 c0       	rjmp	.+232    	; 0x74a <DIO_togglePin+0x106>
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	88 30       	cpi	r24, 0x08	; 8
 666:	08 f0       	brcs	.+2      	; 0x66a <DIO_togglePin+0x26>
 668:	70 c0       	rjmp	.+224    	; 0x74a <DIO_togglePin+0x106>
		u8_State=Success;
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	28 2f       	mov	r18, r24
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	3d 83       	std	Y+5, r19	; 0x05
 676:	2c 83       	std	Y+4, r18	; 0x04
 678:	8c 81       	ldd	r24, Y+4	; 0x04
 67a:	9d 81       	ldd	r25, Y+5	; 0x05
 67c:	81 30       	cpi	r24, 0x01	; 1
 67e:	91 05       	cpc	r25, r1
 680:	49 f1       	breq	.+82     	; 0x6d4 <DIO_togglePin+0x90>
 682:	2c 81       	ldd	r18, Y+4	; 0x04
 684:	3d 81       	ldd	r19, Y+5	; 0x05
 686:	22 30       	cpi	r18, 0x02	; 2
 688:	31 05       	cpc	r19, r1
 68a:	2c f4       	brge	.+10     	; 0x696 <DIO_togglePin+0x52>
 68c:	8c 81       	ldd	r24, Y+4	; 0x04
 68e:	9d 81       	ldd	r25, Y+5	; 0x05
 690:	00 97       	sbiw	r24, 0x00	; 0
 692:	61 f0       	breq	.+24     	; 0x6ac <DIO_togglePin+0x68>
 694:	5a c0       	rjmp	.+180    	; 0x74a <DIO_togglePin+0x106>
 696:	2c 81       	ldd	r18, Y+4	; 0x04
 698:	3d 81       	ldd	r19, Y+5	; 0x05
 69a:	22 30       	cpi	r18, 0x02	; 2
 69c:	31 05       	cpc	r19, r1
 69e:	71 f1       	breq	.+92     	; 0x6fc <DIO_togglePin+0xb8>
 6a0:	8c 81       	ldd	r24, Y+4	; 0x04
 6a2:	9d 81       	ldd	r25, Y+5	; 0x05
 6a4:	83 30       	cpi	r24, 0x03	; 3
 6a6:	91 05       	cpc	r25, r1
 6a8:	e9 f1       	breq	.+122    	; 0x724 <DIO_togglePin+0xe0>
 6aa:	4f c0       	rjmp	.+158    	; 0x74a <DIO_togglePin+0x106>
		{
		case PortA:
			TOGGLE_BIT(PORTA,pin);
 6ac:	ab e3       	ldi	r26, 0x3B	; 59
 6ae:	b0 e0       	ldi	r27, 0x00	; 0
 6b0:	eb e3       	ldi	r30, 0x3B	; 59
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	48 2f       	mov	r20, r24
 6b8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ba:	28 2f       	mov	r18, r24
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	02 2e       	mov	r0, r18
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_togglePin+0x86>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	0a 94       	dec	r0
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_togglePin+0x82>
 6ce:	84 27       	eor	r24, r20
 6d0:	8c 93       	st	X, r24
 6d2:	3b c0       	rjmp	.+118    	; 0x74a <DIO_togglePin+0x106>
			break;
		case PortB:
			TOGGLE_BIT(PORTB,pin);
 6d4:	a8 e3       	ldi	r26, 0x38	; 56
 6d6:	b0 e0       	ldi	r27, 0x00	; 0
 6d8:	e8 e3       	ldi	r30, 0x38	; 56
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	48 2f       	mov	r20, r24
 6e0:	8b 81       	ldd	r24, Y+3	; 0x03
 6e2:	28 2f       	mov	r18, r24
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 2e       	mov	r0, r18
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_togglePin+0xae>
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	0a 94       	dec	r0
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_togglePin+0xaa>
 6f6:	84 27       	eor	r24, r20
 6f8:	8c 93       	st	X, r24
 6fa:	27 c0       	rjmp	.+78     	; 0x74a <DIO_togglePin+0x106>
			break;
		case PortC:
			TOGGLE_BIT(PORTC,pin);
 6fc:	a5 e3       	ldi	r26, 0x35	; 53
 6fe:	b0 e0       	ldi	r27, 0x00	; 0
 700:	e5 e3       	ldi	r30, 0x35	; 53
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	48 2f       	mov	r20, r24
 708:	8b 81       	ldd	r24, Y+3	; 0x03
 70a:	28 2f       	mov	r18, r24
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	02 2e       	mov	r0, r18
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_togglePin+0xd6>
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	0a 94       	dec	r0
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_togglePin+0xd2>
 71e:	84 27       	eor	r24, r20
 720:	8c 93       	st	X, r24
 722:	13 c0       	rjmp	.+38     	; 0x74a <DIO_togglePin+0x106>
			break;
		case PortD:
			TOGGLE_BIT(PORTD,pin);
 724:	a2 e3       	ldi	r26, 0x32	; 50
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	e2 e3       	ldi	r30, 0x32	; 50
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	48 2f       	mov	r20, r24
 730:	8b 81       	ldd	r24, Y+3	; 0x03
 732:	28 2f       	mov	r18, r24
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	02 2e       	mov	r0, r18
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_togglePin+0xfe>
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	0a 94       	dec	r0
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_togglePin+0xfa>
 746:	84 27       	eor	r24, r20
 748:	8c 93       	st	X, r24
			break;
		}

	}
	return u8_State;
 74a:	89 81       	ldd	r24, Y+1	; 0x01
}
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	0f 90       	pop	r0
 752:	0f 90       	pop	r0
 754:	0f 90       	pop	r0
 756:	cf 91       	pop	r28
 758:	df 91       	pop	r29
 75a:	08 95       	ret

0000075c <DIO_readPin>:


E_STATUS DIO_readPin(uint8_t port, uint8_t pin, uint8_t * value)
{
 75c:	df 93       	push	r29
 75e:	cf 93       	push	r28
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
 764:	27 97       	sbiw	r28, 0x07	; 7
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	f8 94       	cli
 76a:	de bf       	out	0x3e, r29	; 62
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	cd bf       	out	0x3d, r28	; 61
 770:	8a 83       	std	Y+2, r24	; 0x02
 772:	6b 83       	std	Y+3, r22	; 0x03
 774:	5d 83       	std	Y+5, r21	; 0x05
 776:	4c 83       	std	Y+4, r20	; 0x04
	E_STATUS u8_State=ERROR;
 778:	8f ef       	ldi	r24, 0xFF	; 255
 77a:	89 83       	std	Y+1, r24	; 0x01
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
 77c:	8a 81       	ldd	r24, Y+2	; 0x02
 77e:	84 30       	cpi	r24, 0x04	; 4
 780:	08 f0       	brcs	.+2      	; 0x784 <DIO_readPin+0x28>
 782:	a7 c0       	rjmp	.+334    	; 0x8d2 <__stack+0x73>
 784:	8b 81       	ldd	r24, Y+3	; 0x03
 786:	88 30       	cpi	r24, 0x08	; 8
 788:	08 f0       	brcs	.+2      	; 0x78c <DIO_readPin+0x30>
 78a:	a3 c0       	rjmp	.+326    	; 0x8d2 <__stack+0x73>
		u8_State=Success;
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 790:	8a 81       	ldd	r24, Y+2	; 0x02
 792:	28 2f       	mov	r18, r24
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	3f 83       	std	Y+7, r19	; 0x07
 798:	2e 83       	std	Y+6, r18	; 0x06
 79a:	4e 81       	ldd	r20, Y+6	; 0x06
 79c:	5f 81       	ldd	r21, Y+7	; 0x07
 79e:	41 30       	cpi	r20, 0x01	; 1
 7a0:	51 05       	cpc	r21, r1
 7a2:	c1 f1       	breq	.+112    	; 0x814 <DIO_readPin+0xb8>
 7a4:	8e 81       	ldd	r24, Y+6	; 0x06
 7a6:	9f 81       	ldd	r25, Y+7	; 0x07
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	91 05       	cpc	r25, r1
 7ac:	34 f4       	brge	.+12     	; 0x7ba <DIO_readPin+0x5e>
 7ae:	2e 81       	ldd	r18, Y+6	; 0x06
 7b0:	3f 81       	ldd	r19, Y+7	; 0x07
 7b2:	21 15       	cp	r18, r1
 7b4:	31 05       	cpc	r19, r1
 7b6:	71 f0       	breq	.+28     	; 0x7d4 <DIO_readPin+0x78>
 7b8:	8c c0       	rjmp	.+280    	; 0x8d2 <__stack+0x73>
 7ba:	4e 81       	ldd	r20, Y+6	; 0x06
 7bc:	5f 81       	ldd	r21, Y+7	; 0x07
 7be:	42 30       	cpi	r20, 0x02	; 2
 7c0:	51 05       	cpc	r21, r1
 7c2:	09 f4       	brne	.+2      	; 0x7c6 <DIO_readPin+0x6a>
 7c4:	47 c0       	rjmp	.+142    	; 0x854 <DIO_readPin+0xf8>
 7c6:	8e 81       	ldd	r24, Y+6	; 0x06
 7c8:	9f 81       	ldd	r25, Y+7	; 0x07
 7ca:	83 30       	cpi	r24, 0x03	; 3
 7cc:	91 05       	cpc	r25, r1
 7ce:	09 f4       	brne	.+2      	; 0x7d2 <DIO_readPin+0x76>
 7d0:	61 c0       	rjmp	.+194    	; 0x894 <__stack+0x35>
 7d2:	7f c0       	rjmp	.+254    	; 0x8d2 <__stack+0x73>
		{
		case PortA:
			*value=BIT_READ(PORTA,pin);
 7d4:	eb e3       	ldi	r30, 0x3B	; 59
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	80 81       	ld	r24, Z
 7da:	48 2f       	mov	r20, r24
 7dc:	50 e0       	ldi	r21, 0x00	; 0
 7de:	8b 81       	ldd	r24, Y+3	; 0x03
 7e0:	28 2f       	mov	r18, r24
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_readPin+0x92>
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	2a 95       	dec	r18
 7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_readPin+0x8e>
 7f2:	9a 01       	movw	r18, r20
 7f4:	28 23       	and	r18, r24
 7f6:	39 23       	and	r19, r25
 7f8:	8b 81       	ldd	r24, Y+3	; 0x03
 7fa:	88 2f       	mov	r24, r24
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	a9 01       	movw	r20, r18
 800:	02 c0       	rjmp	.+4      	; 0x806 <DIO_readPin+0xaa>
 802:	55 95       	asr	r21
 804:	47 95       	ror	r20
 806:	8a 95       	dec	r24
 808:	e2 f7       	brpl	.-8      	; 0x802 <DIO_readPin+0xa6>
 80a:	ca 01       	movw	r24, r20
 80c:	ec 81       	ldd	r30, Y+4	; 0x04
 80e:	fd 81       	ldd	r31, Y+5	; 0x05
 810:	80 83       	st	Z, r24
 812:	5f c0       	rjmp	.+190    	; 0x8d2 <__stack+0x73>
			break;
		case PortB:
			*value=BIT_READ(PORTB,pin);
 814:	e8 e3       	ldi	r30, 0x38	; 56
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	48 2f       	mov	r20, r24
 81c:	50 e0       	ldi	r21, 0x00	; 0
 81e:	8b 81       	ldd	r24, Y+3	; 0x03
 820:	28 2f       	mov	r18, r24
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_readPin+0xd2>
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	2a 95       	dec	r18
 830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_readPin+0xce>
 832:	9a 01       	movw	r18, r20
 834:	28 23       	and	r18, r24
 836:	39 23       	and	r19, r25
 838:	8b 81       	ldd	r24, Y+3	; 0x03
 83a:	88 2f       	mov	r24, r24
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	a9 01       	movw	r20, r18
 840:	02 c0       	rjmp	.+4      	; 0x846 <DIO_readPin+0xea>
 842:	55 95       	asr	r21
 844:	47 95       	ror	r20
 846:	8a 95       	dec	r24
 848:	e2 f7       	brpl	.-8      	; 0x842 <DIO_readPin+0xe6>
 84a:	ca 01       	movw	r24, r20
 84c:	ec 81       	ldd	r30, Y+4	; 0x04
 84e:	fd 81       	ldd	r31, Y+5	; 0x05
 850:	80 83       	st	Z, r24
 852:	3f c0       	rjmp	.+126    	; 0x8d2 <__stack+0x73>
			break;
		case PortC:
			*value=BIT_READ(PORTC,pin);
 854:	e5 e3       	ldi	r30, 0x35	; 53
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
 85a:	48 2f       	mov	r20, r24
 85c:	50 e0       	ldi	r21, 0x00	; 0
 85e:	8b 81       	ldd	r24, Y+3	; 0x03
 860:	28 2f       	mov	r18, r24
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	02 c0       	rjmp	.+4      	; 0x86e <__stack+0xf>
 86a:	88 0f       	add	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	2a 95       	dec	r18
 870:	e2 f7       	brpl	.-8      	; 0x86a <__stack+0xb>
 872:	9a 01       	movw	r18, r20
 874:	28 23       	and	r18, r24
 876:	39 23       	and	r19, r25
 878:	8b 81       	ldd	r24, Y+3	; 0x03
 87a:	88 2f       	mov	r24, r24
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	a9 01       	movw	r20, r18
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	55 95       	asr	r21
 884:	47 95       	ror	r20
 886:	8a 95       	dec	r24
 888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
 88a:	ca 01       	movw	r24, r20
 88c:	ec 81       	ldd	r30, Y+4	; 0x04
 88e:	fd 81       	ldd	r31, Y+5	; 0x05
 890:	80 83       	st	Z, r24
 892:	1f c0       	rjmp	.+62     	; 0x8d2 <__stack+0x73>
			break;
		case PortD:
			*value=BIT_READ(PORTD,pin);
 894:	e2 e3       	ldi	r30, 0x32	; 50
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	48 2f       	mov	r20, r24
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	8b 81       	ldd	r24, Y+3	; 0x03
 8a0:	28 2f       	mov	r18, r24
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__stack+0x4f>
 8aa:	88 0f       	add	r24, r24
 8ac:	99 1f       	adc	r25, r25
 8ae:	2a 95       	dec	r18
 8b0:	e2 f7       	brpl	.-8      	; 0x8aa <__stack+0x4b>
 8b2:	9a 01       	movw	r18, r20
 8b4:	28 23       	and	r18, r24
 8b6:	39 23       	and	r19, r25
 8b8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ba:	88 2f       	mov	r24, r24
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	a9 01       	movw	r20, r18
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__stack+0x67>
 8c2:	55 95       	asr	r21
 8c4:	47 95       	ror	r20
 8c6:	8a 95       	dec	r24
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <__stack+0x63>
 8ca:	ca 01       	movw	r24, r20
 8cc:	ec 81       	ldd	r30, Y+4	; 0x04
 8ce:	fd 81       	ldd	r31, Y+5	; 0x05
 8d0:	80 83       	st	Z, r24
			break;
		}
	}
	return u8_State;
 8d2:	89 81       	ldd	r24, Y+1	; 0x01
}
 8d4:	27 96       	adiw	r28, 0x07	; 7
 8d6:	0f b6       	in	r0, 0x3f	; 63
 8d8:	f8 94       	cli
 8da:	de bf       	out	0x3e, r29	; 62
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	cd bf       	out	0x3d, r28	; 61
 8e0:	cf 91       	pop	r28
 8e2:	df 91       	pop	r29
 8e4:	08 95       	ret

000008e6 <DIO_readPort>:


E_STATUS DIO_readPort(uint8_t port, uint8_t * value)
{
 8e6:	df 93       	push	r29
 8e8:	cf 93       	push	r28
 8ea:	00 d0       	rcall	.+0      	; 0x8ec <DIO_readPort+0x6>
 8ec:	00 d0       	rcall	.+0      	; 0x8ee <DIO_readPort+0x8>
 8ee:	00 d0       	rcall	.+0      	; 0x8f0 <DIO_readPort+0xa>
 8f0:	cd b7       	in	r28, 0x3d	; 61
 8f2:	de b7       	in	r29, 0x3e	; 62
 8f4:	8a 83       	std	Y+2, r24	; 0x02
 8f6:	7c 83       	std	Y+4, r23	; 0x04
 8f8:	6b 83       	std	Y+3, r22	; 0x03
	E_STATUS u8_State=ERROR;
 8fa:	8f ef       	ldi	r24, 0xFF	; 255
 8fc:	89 83       	std	Y+1, r24	; 0x01
	if((port>=PortA)&&(port<=PortD)){
 8fe:	8a 81       	ldd	r24, Y+2	; 0x02
 900:	84 30       	cpi	r24, 0x04	; 4
 902:	e0 f5       	brcc	.+120    	; 0x97c <DIO_readPort+0x96>
		u8_State=Success;
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 908:	8a 81       	ldd	r24, Y+2	; 0x02
 90a:	28 2f       	mov	r18, r24
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	3e 83       	std	Y+6, r19	; 0x06
 910:	2d 83       	std	Y+5, r18	; 0x05
 912:	8d 81       	ldd	r24, Y+5	; 0x05
 914:	9e 81       	ldd	r25, Y+6	; 0x06
 916:	81 30       	cpi	r24, 0x01	; 1
 918:	91 05       	cpc	r25, r1
 91a:	e1 f0       	breq	.+56     	; 0x954 <DIO_readPort+0x6e>
 91c:	2d 81       	ldd	r18, Y+5	; 0x05
 91e:	3e 81       	ldd	r19, Y+6	; 0x06
 920:	22 30       	cpi	r18, 0x02	; 2
 922:	31 05       	cpc	r19, r1
 924:	2c f4       	brge	.+10     	; 0x930 <DIO_readPort+0x4a>
 926:	8d 81       	ldd	r24, Y+5	; 0x05
 928:	9e 81       	ldd	r25, Y+6	; 0x06
 92a:	00 97       	sbiw	r24, 0x00	; 0
 92c:	61 f0       	breq	.+24     	; 0x946 <DIO_readPort+0x60>
 92e:	26 c0       	rjmp	.+76     	; 0x97c <DIO_readPort+0x96>
 930:	2d 81       	ldd	r18, Y+5	; 0x05
 932:	3e 81       	ldd	r19, Y+6	; 0x06
 934:	22 30       	cpi	r18, 0x02	; 2
 936:	31 05       	cpc	r19, r1
 938:	a1 f0       	breq	.+40     	; 0x962 <DIO_readPort+0x7c>
 93a:	8d 81       	ldd	r24, Y+5	; 0x05
 93c:	9e 81       	ldd	r25, Y+6	; 0x06
 93e:	83 30       	cpi	r24, 0x03	; 3
 940:	91 05       	cpc	r25, r1
 942:	b1 f0       	breq	.+44     	; 0x970 <DIO_readPort+0x8a>
 944:	1b c0       	rjmp	.+54     	; 0x97c <DIO_readPort+0x96>
		{
		case PortA:
			*value=PINA;
 946:	e9 e3       	ldi	r30, 0x39	; 57
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	eb 81       	ldd	r30, Y+3	; 0x03
 94e:	fc 81       	ldd	r31, Y+4	; 0x04
 950:	80 83       	st	Z, r24
 952:	14 c0       	rjmp	.+40     	; 0x97c <DIO_readPort+0x96>
			break;
		case PortB:
			*value=PINB;
 954:	e6 e3       	ldi	r30, 0x36	; 54
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	80 81       	ld	r24, Z
 95a:	eb 81       	ldd	r30, Y+3	; 0x03
 95c:	fc 81       	ldd	r31, Y+4	; 0x04
 95e:	80 83       	st	Z, r24
 960:	0d c0       	rjmp	.+26     	; 0x97c <DIO_readPort+0x96>
			break;
		case PortC:
			*value=PINC;
 962:	e3 e3       	ldi	r30, 0x33	; 51
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 81       	ld	r24, Z
 968:	eb 81       	ldd	r30, Y+3	; 0x03
 96a:	fc 81       	ldd	r31, Y+4	; 0x04
 96c:	80 83       	st	Z, r24
 96e:	06 c0       	rjmp	.+12     	; 0x97c <DIO_readPort+0x96>
			break;
		case PortD:
			*value=PIND;
 970:	e0 e3       	ldi	r30, 0x30	; 48
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
 976:	eb 81       	ldd	r30, Y+3	; 0x03
 978:	fc 81       	ldd	r31, Y+4	; 0x04
 97a:	80 83       	st	Z, r24
			break;
		}
	}
	return u8_State;
 97c:	89 81       	ldd	r24, Y+1	; 0x01
}
 97e:	26 96       	adiw	r28, 0x06	; 6
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	f8 94       	cli
 984:	de bf       	out	0x3e, r29	; 62
 986:	0f be       	out	0x3f, r0	; 63
 988:	cd bf       	out	0x3d, r28	; 61
 98a:	cf 91       	pop	r28
 98c:	df 91       	pop	r29
 98e:	08 95       	ret

00000990 <DIO_writePin>:


E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
 990:	df 93       	push	r29
 992:	cf 93       	push	r28
 994:	00 d0       	rcall	.+0      	; 0x996 <DIO_writePin+0x6>
 996:	00 d0       	rcall	.+0      	; 0x998 <DIO_writePin+0x8>
 998:	00 d0       	rcall	.+0      	; 0x99a <DIO_writePin+0xa>
 99a:	cd b7       	in	r28, 0x3d	; 61
 99c:	de b7       	in	r29, 0x3e	; 62
 99e:	8a 83       	std	Y+2, r24	; 0x02
 9a0:	6b 83       	std	Y+3, r22	; 0x03
 9a2:	4c 83       	std	Y+4, r20	; 0x04
	E_STATUS u8_State=ERROR;
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	89 83       	std	Y+1, r24	; 0x01
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
 9a8:	8a 81       	ldd	r24, Y+2	; 0x02
 9aa:	84 30       	cpi	r24, 0x04	; 4
 9ac:	08 f0       	brcs	.+2      	; 0x9b0 <DIO_writePin+0x20>
 9ae:	d7 c0       	rjmp	.+430    	; 0xb5e <DIO_writePin+0x1ce>
 9b0:	8b 81       	ldd	r24, Y+3	; 0x03
 9b2:	88 30       	cpi	r24, 0x08	; 8
 9b4:	08 f0       	brcs	.+2      	; 0x9b8 <DIO_writePin+0x28>
 9b6:	d3 c0       	rjmp	.+422    	; 0xb5e <DIO_writePin+0x1ce>
		u8_State=Success;
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 9bc:	8a 81       	ldd	r24, Y+2	; 0x02
 9be:	28 2f       	mov	r18, r24
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	3e 83       	std	Y+6, r19	; 0x06
 9c4:	2d 83       	std	Y+5, r18	; 0x05
 9c6:	8d 81       	ldd	r24, Y+5	; 0x05
 9c8:	9e 81       	ldd	r25, Y+6	; 0x06
 9ca:	81 30       	cpi	r24, 0x01	; 1
 9cc:	91 05       	cpc	r25, r1
 9ce:	09 f4       	brne	.+2      	; 0x9d2 <DIO_writePin+0x42>
 9d0:	43 c0       	rjmp	.+134    	; 0xa58 <DIO_writePin+0xc8>
 9d2:	2d 81       	ldd	r18, Y+5	; 0x05
 9d4:	3e 81       	ldd	r19, Y+6	; 0x06
 9d6:	22 30       	cpi	r18, 0x02	; 2
 9d8:	31 05       	cpc	r19, r1
 9da:	2c f4       	brge	.+10     	; 0x9e6 <DIO_writePin+0x56>
 9dc:	8d 81       	ldd	r24, Y+5	; 0x05
 9de:	9e 81       	ldd	r25, Y+6	; 0x06
 9e0:	00 97       	sbiw	r24, 0x00	; 0
 9e2:	71 f0       	breq	.+28     	; 0xa00 <DIO_writePin+0x70>
 9e4:	bc c0       	rjmp	.+376    	; 0xb5e <DIO_writePin+0x1ce>
 9e6:	2d 81       	ldd	r18, Y+5	; 0x05
 9e8:	3e 81       	ldd	r19, Y+6	; 0x06
 9ea:	22 30       	cpi	r18, 0x02	; 2
 9ec:	31 05       	cpc	r19, r1
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <DIO_writePin+0x62>
 9f0:	5f c0       	rjmp	.+190    	; 0xab0 <DIO_writePin+0x120>
 9f2:	8d 81       	ldd	r24, Y+5	; 0x05
 9f4:	9e 81       	ldd	r25, Y+6	; 0x06
 9f6:	83 30       	cpi	r24, 0x03	; 3
 9f8:	91 05       	cpc	r25, r1
 9fa:	09 f4       	brne	.+2      	; 0x9fe <DIO_writePin+0x6e>
 9fc:	85 c0       	rjmp	.+266    	; 0xb08 <DIO_writePin+0x178>
 9fe:	af c0       	rjmp	.+350    	; 0xb5e <DIO_writePin+0x1ce>
		{
		case PortA:
		{
			if(data==HIGH)
 a00:	8c 81       	ldd	r24, Y+4	; 0x04
 a02:	81 30       	cpi	r24, 0x01	; 1
 a04:	a1 f4       	brne	.+40     	; 0xa2e <DIO_writePin+0x9e>
				SET_BIT(PORTA,pin);
 a06:	ab e3       	ldi	r26, 0x3B	; 59
 a08:	b0 e0       	ldi	r27, 0x00	; 0
 a0a:	eb e3       	ldi	r30, 0x3B	; 59
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	80 81       	ld	r24, Z
 a10:	48 2f       	mov	r20, r24
 a12:	8b 81       	ldd	r24, Y+3	; 0x03
 a14:	28 2f       	mov	r18, r24
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	02 2e       	mov	r0, r18
 a1e:	02 c0       	rjmp	.+4      	; 0xa24 <DIO_writePin+0x94>
 a20:	88 0f       	add	r24, r24
 a22:	99 1f       	adc	r25, r25
 a24:	0a 94       	dec	r0
 a26:	e2 f7       	brpl	.-8      	; 0xa20 <DIO_writePin+0x90>
 a28:	84 2b       	or	r24, r20
 a2a:	8c 93       	st	X, r24
 a2c:	98 c0       	rjmp	.+304    	; 0xb5e <DIO_writePin+0x1ce>
			else
				CLEAR_BIT(PORTA,pin);
 a2e:	ab e3       	ldi	r26, 0x3B	; 59
 a30:	b0 e0       	ldi	r27, 0x00	; 0
 a32:	eb e3       	ldi	r30, 0x3B	; 59
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	80 81       	ld	r24, Z
 a38:	48 2f       	mov	r20, r24
 a3a:	8b 81       	ldd	r24, Y+3	; 0x03
 a3c:	28 2f       	mov	r18, r24
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	81 e0       	ldi	r24, 0x01	; 1
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	02 2e       	mov	r0, r18
 a46:	02 c0       	rjmp	.+4      	; 0xa4c <DIO_writePin+0xbc>
 a48:	88 0f       	add	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	0a 94       	dec	r0
 a4e:	e2 f7       	brpl	.-8      	; 0xa48 <DIO_writePin+0xb8>
 a50:	80 95       	com	r24
 a52:	84 23       	and	r24, r20
 a54:	8c 93       	st	X, r24
 a56:	83 c0       	rjmp	.+262    	; 0xb5e <DIO_writePin+0x1ce>
		}
		break;
		case PortB:
		{
			if(data==HIGH)
 a58:	8c 81       	ldd	r24, Y+4	; 0x04
 a5a:	81 30       	cpi	r24, 0x01	; 1
 a5c:	a1 f4       	brne	.+40     	; 0xa86 <DIO_writePin+0xf6>
				SET_BIT(PORTB,pin);
 a5e:	a8 e3       	ldi	r26, 0x38	; 56
 a60:	b0 e0       	ldi	r27, 0x00	; 0
 a62:	e8 e3       	ldi	r30, 0x38	; 56
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	80 81       	ld	r24, Z
 a68:	48 2f       	mov	r20, r24
 a6a:	8b 81       	ldd	r24, Y+3	; 0x03
 a6c:	28 2f       	mov	r18, r24
 a6e:	30 e0       	ldi	r19, 0x00	; 0
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	02 2e       	mov	r0, r18
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_writePin+0xec>
 a78:	88 0f       	add	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	0a 94       	dec	r0
 a7e:	e2 f7       	brpl	.-8      	; 0xa78 <DIO_writePin+0xe8>
 a80:	84 2b       	or	r24, r20
 a82:	8c 93       	st	X, r24
 a84:	6c c0       	rjmp	.+216    	; 0xb5e <DIO_writePin+0x1ce>
			else
				CLEAR_BIT(PORTB,pin);
 a86:	a8 e3       	ldi	r26, 0x38	; 56
 a88:	b0 e0       	ldi	r27, 0x00	; 0
 a8a:	e8 e3       	ldi	r30, 0x38	; 56
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	80 81       	ld	r24, Z
 a90:	48 2f       	mov	r20, r24
 a92:	8b 81       	ldd	r24, Y+3	; 0x03
 a94:	28 2f       	mov	r18, r24
 a96:	30 e0       	ldi	r19, 0x00	; 0
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	02 2e       	mov	r0, r18
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <DIO_writePin+0x114>
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	0a 94       	dec	r0
 aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <DIO_writePin+0x110>
 aa8:	80 95       	com	r24
 aaa:	84 23       	and	r24, r20
 aac:	8c 93       	st	X, r24
 aae:	57 c0       	rjmp	.+174    	; 0xb5e <DIO_writePin+0x1ce>
		}
		break;
		case PortC:
		{
			if(data==HIGH)
 ab0:	8c 81       	ldd	r24, Y+4	; 0x04
 ab2:	81 30       	cpi	r24, 0x01	; 1
 ab4:	a1 f4       	brne	.+40     	; 0xade <DIO_writePin+0x14e>
				SET_BIT(PORTC,pin);
 ab6:	a5 e3       	ldi	r26, 0x35	; 53
 ab8:	b0 e0       	ldi	r27, 0x00	; 0
 aba:	e5 e3       	ldi	r30, 0x35	; 53
 abc:	f0 e0       	ldi	r31, 0x00	; 0
 abe:	80 81       	ld	r24, Z
 ac0:	48 2f       	mov	r20, r24
 ac2:	8b 81       	ldd	r24, Y+3	; 0x03
 ac4:	28 2f       	mov	r18, r24
 ac6:	30 e0       	ldi	r19, 0x00	; 0
 ac8:	81 e0       	ldi	r24, 0x01	; 1
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	02 2e       	mov	r0, r18
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <DIO_writePin+0x144>
 ad0:	88 0f       	add	r24, r24
 ad2:	99 1f       	adc	r25, r25
 ad4:	0a 94       	dec	r0
 ad6:	e2 f7       	brpl	.-8      	; 0xad0 <DIO_writePin+0x140>
 ad8:	84 2b       	or	r24, r20
 ada:	8c 93       	st	X, r24
 adc:	40 c0       	rjmp	.+128    	; 0xb5e <DIO_writePin+0x1ce>
			else
				CLEAR_BIT(PORTC,pin);
 ade:	a5 e3       	ldi	r26, 0x35	; 53
 ae0:	b0 e0       	ldi	r27, 0x00	; 0
 ae2:	e5 e3       	ldi	r30, 0x35	; 53
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	80 81       	ld	r24, Z
 ae8:	48 2f       	mov	r20, r24
 aea:	8b 81       	ldd	r24, Y+3	; 0x03
 aec:	28 2f       	mov	r18, r24
 aee:	30 e0       	ldi	r19, 0x00	; 0
 af0:	81 e0       	ldi	r24, 0x01	; 1
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	02 2e       	mov	r0, r18
 af6:	02 c0       	rjmp	.+4      	; 0xafc <DIO_writePin+0x16c>
 af8:	88 0f       	add	r24, r24
 afa:	99 1f       	adc	r25, r25
 afc:	0a 94       	dec	r0
 afe:	e2 f7       	brpl	.-8      	; 0xaf8 <DIO_writePin+0x168>
 b00:	80 95       	com	r24
 b02:	84 23       	and	r24, r20
 b04:	8c 93       	st	X, r24
 b06:	2b c0       	rjmp	.+86     	; 0xb5e <DIO_writePin+0x1ce>
		}
		break;
		case PortD:
		{
			if(data==HIGH)
 b08:	8c 81       	ldd	r24, Y+4	; 0x04
 b0a:	81 30       	cpi	r24, 0x01	; 1
 b0c:	a1 f4       	brne	.+40     	; 0xb36 <DIO_writePin+0x1a6>
				SET_BIT(PORTD,pin);
 b0e:	a2 e3       	ldi	r26, 0x32	; 50
 b10:	b0 e0       	ldi	r27, 0x00	; 0
 b12:	e2 e3       	ldi	r30, 0x32	; 50
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	80 81       	ld	r24, Z
 b18:	48 2f       	mov	r20, r24
 b1a:	8b 81       	ldd	r24, Y+3	; 0x03
 b1c:	28 2f       	mov	r18, r24
 b1e:	30 e0       	ldi	r19, 0x00	; 0
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	02 2e       	mov	r0, r18
 b26:	02 c0       	rjmp	.+4      	; 0xb2c <DIO_writePin+0x19c>
 b28:	88 0f       	add	r24, r24
 b2a:	99 1f       	adc	r25, r25
 b2c:	0a 94       	dec	r0
 b2e:	e2 f7       	brpl	.-8      	; 0xb28 <DIO_writePin+0x198>
 b30:	84 2b       	or	r24, r20
 b32:	8c 93       	st	X, r24
 b34:	14 c0       	rjmp	.+40     	; 0xb5e <DIO_writePin+0x1ce>
			else
				CLEAR_BIT(PORTD,pin);
 b36:	a2 e3       	ldi	r26, 0x32	; 50
 b38:	b0 e0       	ldi	r27, 0x00	; 0
 b3a:	e2 e3       	ldi	r30, 0x32	; 50
 b3c:	f0 e0       	ldi	r31, 0x00	; 0
 b3e:	80 81       	ld	r24, Z
 b40:	48 2f       	mov	r20, r24
 b42:	8b 81       	ldd	r24, Y+3	; 0x03
 b44:	28 2f       	mov	r18, r24
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	81 e0       	ldi	r24, 0x01	; 1
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	02 2e       	mov	r0, r18
 b4e:	02 c0       	rjmp	.+4      	; 0xb54 <DIO_writePin+0x1c4>
 b50:	88 0f       	add	r24, r24
 b52:	99 1f       	adc	r25, r25
 b54:	0a 94       	dec	r0
 b56:	e2 f7       	brpl	.-8      	; 0xb50 <DIO_writePin+0x1c0>
 b58:	80 95       	com	r24
 b5a:	84 23       	and	r24, r20
 b5c:	8c 93       	st	X, r24
		}
		break;
		}
	}
	return u8_State;
 b5e:	89 81       	ldd	r24, Y+1	; 0x01
}
 b60:	26 96       	adiw	r28, 0x06	; 6
 b62:	0f b6       	in	r0, 0x3f	; 63
 b64:	f8 94       	cli
 b66:	de bf       	out	0x3e, r29	; 62
 b68:	0f be       	out	0x3f, r0	; 63
 b6a:	cd bf       	out	0x3d, r28	; 61
 b6c:	cf 91       	pop	r28
 b6e:	df 91       	pop	r29
 b70:	08 95       	ret

00000b72 <DIO_writePort>:


E_STATUS DIO_writePort(uint8_t port, uint8_t data)
{
 b72:	df 93       	push	r29
 b74:	cf 93       	push	r28
 b76:	00 d0       	rcall	.+0      	; 0xb78 <DIO_writePort+0x6>
 b78:	00 d0       	rcall	.+0      	; 0xb7a <DIO_writePort+0x8>
 b7a:	0f 92       	push	r0
 b7c:	cd b7       	in	r28, 0x3d	; 61
 b7e:	de b7       	in	r29, 0x3e	; 62
 b80:	8a 83       	std	Y+2, r24	; 0x02
 b82:	6b 83       	std	Y+3, r22	; 0x03
	E_STATUS u8_State=ERROR;
 b84:	8f ef       	ldi	r24, 0xFF	; 255
 b86:	89 83       	std	Y+1, r24	; 0x01
	if((port>=PortA)&&(port<=PortD)){
 b88:	8a 81       	ldd	r24, Y+2	; 0x02
 b8a:	84 30       	cpi	r24, 0x04	; 4
 b8c:	a0 f5       	brcc	.+104    	; 0xbf6 <DIO_writePort+0x84>
		u8_State=Success;
 b8e:	81 e0       	ldi	r24, 0x01	; 1
 b90:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 b92:	8a 81       	ldd	r24, Y+2	; 0x02
 b94:	28 2f       	mov	r18, r24
 b96:	30 e0       	ldi	r19, 0x00	; 0
 b98:	3d 83       	std	Y+5, r19	; 0x05
 b9a:	2c 83       	std	Y+4, r18	; 0x04
 b9c:	8c 81       	ldd	r24, Y+4	; 0x04
 b9e:	9d 81       	ldd	r25, Y+5	; 0x05
 ba0:	81 30       	cpi	r24, 0x01	; 1
 ba2:	91 05       	cpc	r25, r1
 ba4:	d1 f0       	breq	.+52     	; 0xbda <DIO_writePort+0x68>
 ba6:	2c 81       	ldd	r18, Y+4	; 0x04
 ba8:	3d 81       	ldd	r19, Y+5	; 0x05
 baa:	22 30       	cpi	r18, 0x02	; 2
 bac:	31 05       	cpc	r19, r1
 bae:	2c f4       	brge	.+10     	; 0xbba <DIO_writePort+0x48>
 bb0:	8c 81       	ldd	r24, Y+4	; 0x04
 bb2:	9d 81       	ldd	r25, Y+5	; 0x05
 bb4:	00 97       	sbiw	r24, 0x00	; 0
 bb6:	61 f0       	breq	.+24     	; 0xbd0 <DIO_writePort+0x5e>
 bb8:	1e c0       	rjmp	.+60     	; 0xbf6 <DIO_writePort+0x84>
 bba:	2c 81       	ldd	r18, Y+4	; 0x04
 bbc:	3d 81       	ldd	r19, Y+5	; 0x05
 bbe:	22 30       	cpi	r18, 0x02	; 2
 bc0:	31 05       	cpc	r19, r1
 bc2:	81 f0       	breq	.+32     	; 0xbe4 <DIO_writePort+0x72>
 bc4:	8c 81       	ldd	r24, Y+4	; 0x04
 bc6:	9d 81       	ldd	r25, Y+5	; 0x05
 bc8:	83 30       	cpi	r24, 0x03	; 3
 bca:	91 05       	cpc	r25, r1
 bcc:	81 f0       	breq	.+32     	; 0xbee <DIO_writePort+0x7c>
 bce:	13 c0       	rjmp	.+38     	; 0xbf6 <DIO_writePort+0x84>
		{
		case PortA:
			PORTA=data;
 bd0:	eb e3       	ldi	r30, 0x3B	; 59
 bd2:	f0 e0       	ldi	r31, 0x00	; 0
 bd4:	8b 81       	ldd	r24, Y+3	; 0x03
 bd6:	80 83       	st	Z, r24
 bd8:	0e c0       	rjmp	.+28     	; 0xbf6 <DIO_writePort+0x84>
			break;
		case PortB:
			PORTB=data;
 bda:	e8 e3       	ldi	r30, 0x38	; 56
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	8b 81       	ldd	r24, Y+3	; 0x03
 be0:	80 83       	st	Z, r24
 be2:	09 c0       	rjmp	.+18     	; 0xbf6 <DIO_writePort+0x84>
			break;
		case PortC:
			PORTC=data;
 be4:	e5 e3       	ldi	r30, 0x35	; 53
 be6:	f0 e0       	ldi	r31, 0x00	; 0
 be8:	8b 81       	ldd	r24, Y+3	; 0x03
 bea:	80 83       	st	Z, r24
 bec:	04 c0       	rjmp	.+8      	; 0xbf6 <DIO_writePort+0x84>
			break;
		case PortD:
			PORTD=data;
 bee:	e2 e3       	ldi	r30, 0x32	; 50
 bf0:	f0 e0       	ldi	r31, 0x00	; 0
 bf2:	8b 81       	ldd	r24, Y+3	; 0x03
 bf4:	80 83       	st	Z, r24
			break;
		}
	}
	return u8_State;
 bf6:	89 81       	ldd	r24, Y+1	; 0x01
}
 bf8:	0f 90       	pop	r0
 bfa:	0f 90       	pop	r0
 bfc:	0f 90       	pop	r0
 bfe:	0f 90       	pop	r0
 c00:	0f 90       	pop	r0
 c02:	cf 91       	pop	r28
 c04:	df 91       	pop	r29
 c06:	08 95       	ret

00000c08 <System_Update>:

#define STR_SIZE 256
uint8_t Str[STR_SIZE];

void System_Update()
{
 c08:	df 93       	push	r29
 c0a:	cf 93       	push	r28
 c0c:	cd b7       	in	r28, 0x3d	; 61
 c0e:	de b7       	in	r29, 0x3e	; 62
	SPI_ReceiveString(Str);
 c10:	80 e6       	ldi	r24, 0x60	; 96
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	0e 94 86 01 	call	0x30c	; 0x30c <SPI_ReceiveString>
	UART_sendString(Str);
 c18:	80 e6       	ldi	r24, 0x60	; 96
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	0e 94 7e 00 	call	0xfc	; 0xfc <UART_sendString>
}
 c20:	cf 91       	pop	r28
 c22:	df 91       	pop	r29
 c24:	08 95       	ret

00000c26 <System_Init>:

void System_Init()
{
 c26:	df 93       	push	r29
 c28:	cf 93       	push	r28
 c2a:	cd b7       	in	r28, 0x3d	; 61
 c2c:	de b7       	in	r29, 0x3e	; 62
	UART_init();
 c2e:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_init>
	SPI_initSlave();
 c32:	0e 94 11 01 	call	0x222	; 0x222 <SPI_initSlave>
}
 c36:	cf 91       	pop	r28
 c38:	df 91       	pop	r29
 c3a:	08 95       	ret

00000c3c <main>:

int main(void){
 c3c:	df 93       	push	r29
 c3e:	cf 93       	push	r28
 c40:	cd b7       	in	r28, 0x3d	; 61
 c42:	de b7       	in	r29, 0x3e	; 62

	System_Init();
 c44:	0e 94 13 06 	call	0xc26	; 0xc26 <System_Init>

	while(1)
	{
		System_Update();
 c48:	0e 94 04 06 	call	0xc08	; 0xc08 <System_Update>
 c4c:	fd cf       	rjmp	.-6      	; 0xc48 <main+0xc>

00000c4e <_exit>:
 c4e:	f8 94       	cli

00000c50 <__stop_program>:
 c50:	ff cf       	rjmp	.-2      	; 0xc50 <__stop_program>
